{"version":3,"sources":["logo.svg","components/screen/Order/Order.js","components/screen/Screen.js","axios-orders.js","containers/Builder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","order","props","iceCream","it","map","iC","i","react_default","a","createElement","className","tastes","decoration","sauce","onClick","finishOrder","num","screen","ordersData","item","Order_Order","instance","axios","create","baseURL","Builder","state","ids","t","Date","tempState","_this","o","splice","tempID","post","then","response","catch","error","console","log","delete","setState","_this2","this","setInterval","currentState","tempArr","orderIds","get","data","Object","keys","forEach","push","alert","screen_Screen","Component","App","src_containers_Builder","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uPC+BzBC,SA5BD,SAAAC,GACZ,IAAMC,EAAWD,EAAME,GAAGC,IAAI,SAACC,EAAIC,GACjC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAIJ,EAAGM,OAAO,IACdJ,EAAAC,EAAAC,cAAA,SAAIJ,EAAGM,OAAO,IACdJ,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAIJ,EAAGO,YACPL,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SAAIJ,EAAGQ,UAIb,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBR,GAChCK,EAAAC,EAAAC,cAAA,UACEC,UAAU,eACVI,QAAS,kBAAMb,EAAMc,YAAYd,EAAMe,OAFzC,2BCLSC,SAZA,SAAAhB,GASb,OARkBA,EAAMiB,WAAWd,IAAI,SAACe,EAAMb,GAE5C,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACW,EAAD,CAAOjB,GAAIgB,EAAMH,IAAKV,EAAGS,YAAad,EAAMc,mCCHrCM,SAJEC,EAAMC,OAAO,CAC1BC,QAAS,gDC6DEC,6MA1DbC,MAAQ,CAAER,WAAY,GAAIS,IAAK,MAwB/BZ,YAAc,SAAAa,GACJ,IAAIC,KAAZ,IACIC,EAAYC,EAAKL,MAAMR,WACrBc,EAAIF,EAAUF,GACpBE,EAAUG,OAAOL,EAAG,GACpB,IAAIM,EAASH,EAAKL,MAAMC,IACxBL,EACGa,KAAK,cAAeH,GACpBI,KAAK,SAAAC,MACLC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,KAC9BjB,EACGoB,OAAO,SAAWX,EAAKL,MAAMC,IAAIC,GAAK,SACtCQ,KAAK,SAAAC,GACJH,EAAOD,OAAOL,EAAG,GACjBG,EAAKY,SAAS,CAAEzB,WAAYY,EAAWH,IAAKO,MAE7CI,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,yFAtCZ,IAAAK,EAAAC,KAClBC,YAAY,WACV,IAAIC,EAAeH,EACfI,EAAU,GACVC,EAAW,GACf3B,EACG4B,IAAI,wDACJd,KAAK,SAAAC,GACAA,EAASc,OACXC,OAAOC,KAAKhB,EAASc,MAAMG,QAAQ,SAASnC,GAC1C6B,EAAQO,KAAKlB,EAASc,KAAKhC,IAC3B8B,EAASM,KAAKpC,KAEhB4B,EAAaJ,SAAS,CAAEzB,WAAY8B,EAASrB,IAAKsB,OAGrDX,MAAM,SAAAC,GACLiB,MAAMjB,MAET,sCAuBH,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACgD,EAAD,CACEvC,WAAY2B,KAAKnB,MAAMR,WACvBH,YAAa8B,KAAK9B,uBAnDR2C,mBCQPC,MARf,WACE,OACEpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmD,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.e3c91a97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./Order.css\";\r\n\r\nconst order = props => {\r\n  const iceCream = props.it.map((iC, i) => {\r\n    return (\r\n      <div className=\"order-item\">\r\n        <h4>SMAKI</h4>\r\n        <p>{iC.tastes[0]}</p>\r\n        <p>{iC.tastes[1]}</p>\r\n        <h4>DEKORACJE</h4>\r\n        <p>{iC.decoration}</p>\r\n        <h4>POLEWY</h4>\r\n        <p>{iC.sauce}</p>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"order\">\r\n      <h3>Zamówienie:</h3>\r\n      <div className=\"order-wrapper\">{iceCream}</div>\r\n      <button\r\n        className=\"order-button\"\r\n        onClick={() => props.finishOrder(props.num)}\r\n      >\r\n        Zamówienie gotowe\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default order;\r\n","import React from \"react\";\r\nimport Order from \"./Order/Order\";\r\nimport \"./Screen.css\";\r\n\r\nconst screen = props => {\r\n  const orderItem = props.ordersData.map((item, i) => {\r\n    //console.log(item);\r\n    return (\r\n      <div className=\"screen\">\r\n        <Order it={item} num={i} finishOrder={props.finishOrder} />\r\n      </div>\r\n    );\r\n  });\r\n  return orderItem;\r\n};\r\n\r\nexport default screen;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://ice-cream-app-d8782.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","import React, { Component } from \"react\";\r\nimport Screen from \"../components/screen/Screen\";\r\nimport \"./Builder.css\";\r\nimport axios from \"../axios-orders\";\r\n\r\nclass Builder extends Component {\r\n  state = { ordersData: [], ids: [] };\r\n\r\n  componentDidMount() {\r\n    setInterval(() => {\r\n      let currentState = this;\r\n      let tempArr = [];\r\n      let orderIds = [];\r\n      axios\r\n        .get(\"https://ice-cream-app-d8782.firebaseio.com/test.json\")\r\n        .then(response => {\r\n          if (response.data) {\r\n            Object.keys(response.data).forEach(function(item) {\r\n              tempArr.push(response.data[item]);\r\n              orderIds.push(item);\r\n            });\r\n            currentState.setState({ ordersData: tempArr, ids: orderIds });\r\n          }\r\n        })\r\n        .catch(error => {\r\n          alert(error);\r\n        });\r\n    }, 5000);\r\n  }\r\n\r\n  finishOrder = t => {\r\n    let d = new Date();\r\n    let tempState = this.state.ordersData;\r\n    const o = tempState[t];\r\n    tempState.splice(t, 1);\r\n    let tempID = this.state.ids;\r\n    axios\r\n      .post(\"/test2.json\", o)\r\n      .then(response => {})\r\n      .catch(error => console.log(error));\r\n    axios\r\n      .delete(\"/test/\" + this.state.ids[t] + \".json\")\r\n      .then(response => {\r\n        tempID.splice(t, 1);\r\n        this.setState({ ordersData: tempState, ids: tempID });\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"builder\">\r\n        <h3 className=\"builder-header\">ZAMÓWIENIA</h3>\r\n        <div className=\"builder-wrapper\">\r\n          <Screen\r\n            ordersData={this.state.ordersData}\r\n            finishOrder={this.finishOrder}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Builder;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Builder from \"./containers/Builder\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Builder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}